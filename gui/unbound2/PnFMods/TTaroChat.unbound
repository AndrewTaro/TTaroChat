(def constant TT_CHAT_INSTALLED true) # For modconfig

# Depends on Sender
(def constant TTChat_NAME_COLOR_PRESET [
	# Roslich
	{
		ALLY		: 0x3fbf8c,
		DIVISION	: 0xd9ae57,
		ENEMY		: 0xbf2900,
		PLAYER		: 0x3fbf8c,
		TEAMKILLER	: 0xff96ca,
		DEFAULT		: 0xd9d9d9,
	},
	# AutoSpy
	{
		ALLY		: 0x4ce8aa,
		DIVISION	: 0xffcc66,
		ENEMY		: 0xff3600,
		PLAYER		: 0xffffff,
		TEAMKILLER	: 0xff96ca,
		DEFAULT		: 0xd9d9d9,
	},
	# TTaro
	{
		ALLY		: 0x3fbf8c,
		DIVISION	: 0xd9ae57,
		ENEMY		: 0xbf2900,
		PLAYER		: 0x3fbf8c,
		TEAMKILLER	: 0xff96ca,
		DEFAULT		: 0xd9d9d9,
	},
])

# Depends on Chat Destination
(def constant TTChat_CHAT_COLOR {
	ALLY		: 0x4ce8aa,
	DIVISION	: 0xffcc66,
	ALL			: 0xffffff,
	DEFAULT		: 0xffffff,
})

(def constant TTChat_SHIP_ICON_COLOR_PRESET [
	#Use -(234-0x??)
	#None
	{
		Auxiliary:	{},
		AirCarrier:	{},
		Battleship:	{},
		Cruiser:	{},
		Destroyer: 	{},
		Submarine:	{},
	},
	#Aslain v1
	{
		Auxiliary:	{redOffset: -184, greenOffset: -134, blueOffset: -234, alphaOffset:    0},
		AirCarrier:	{redOffset: -106, greenOffset:  -64, blueOffset:   21, alphaOffset:    0},
		Battleship:	{redOffset:   21, greenOffset: -106, blueOffset: -106, alphaOffset:    0},
		Cruiser:	{redOffset:	  21, greenOffset: 	  0, blueOffset: -106, alphaOffset:    0},
		Destroyer: 	{redOffset:	 -64, greenOffset: 	 21, blueOffset: -106, alphaOffset:    0},
		Submarine:	{redOffset: -207, greenOffset:    4, blueOffset:   11, alphaOffset:    0},
	},
	#Aslain v2
	{
		Auxiliary:	{redOffset: -184, greenOffset: -134, blueOffset: -234, alphaOffset:    0},
		AirCarrier:	{redOffset:  -43, greenOffset: -106, blueOffset:   21, alphaOffset:    0},
		Battleship:	{redOffset:   21, greenOffset: -106, blueOffset: -106, alphaOffset:    0},
		Cruiser:	{redOffset:	  21, greenOffset: 	  0, blueOffset: -106, alphaOffset:    0},
		Destroyer: 	{redOffset:	 -64, greenOffset: 	 21, blueOffset: -106, alphaOffset:    0},
		Submarine:	{redOffset: -106, greenOffset:  -64, blueOffset:   21, alphaOffset:    0},
	},
	#AutoSpy
	{
		Auxiliary:	{redOffset: -184, greenOffset: -134, blueOffset: -234, alphaOffset: -128},
		AirCarrier:	{redOffset: -134, greenOffset: -134, blueOffset: -134, alphaOffset: -128},
		Battleship:	{redOffset: -234, greenOffset: -184, blueOffset: -154, alphaOffset: -128},
		Cruiser:	{redOffset: -89,  greenOffset: -159, blueOffset: -234, alphaOffset: -128},
		Destroyer: 	{redOffset: -184, greenOffset: -134, blueOffset: -184, alphaOffset: -128},
		Submarine:	{redOffset: -224, greenOffset: -224, blueOffset: -224, alphaOffset: -128},
	},
	#Roslich
	{
		Auxiliary:	{redOffset:   21, greenOffset: -234, blueOffset:   21, alphaOffset:    0},
		AirCarrier:	{redOffset:   21, greenOffset:   21, blueOffset: -234, alphaOffset:    0},
		Battleship:	{redOffset:   21, greenOffset: -234, blueOffset: -234, alphaOffset:    0},
		Cruiser:	{redOffset: -234, greenOffset: -234, blueOffset:   21, alphaOffset:    0},
		Destroyer: 	{redOffset: -234, greenOffset:    0, blueOffset: -234, alphaOffset:    0},
		Submarine:	{redOffset: -234, greenOffset:   21, blueOffset:   21, alphaOffset:    0},
	},
	#DeCease
	{
		Auxiliary:	{redOffset:   11, greenOffset: -235, blueOffset:   40, alphaOffset:    0},
		AirCarrier:	{redOffset:   -9, greenOffset:  -60, blueOffset: -119, alphaOffset:    0},
		Battleship:	{redOffset:  -65, greenOffset:  -74, blueOffset:   40, alphaOffset:    0},
		Cruiser:	{redOffset:   20, greenOffset:  -76, blueOffset: -128, alphaOffset:    0},
		Destroyer: 	{redOffset: -137, greenOffset:   11, blueOffset: -124, alphaOffset:    0},
		Submarine:	{redOffset: -255, greenOffset: -255, blueOffset: -255, alphaOffset:    0},
	},
	#Hakabase
	{
		Auxiliary:	{redOffset: -184, greenOffset: -134, blueOffset: -234, alphaOffset:  -70},
		AirCarrier:	{redOffset: -226, greenOffset:   -7, blueOffset:   21, alphaOffset:  -70},
		Battleship:	{redOffset:   21, greenOffset: -234, blueOffset: -234, alphaOffset:  -70},
		Cruiser:	{redOffset:	  21, greenOffset: 	 21, blueOffset: -234, alphaOffset:  -70},
		Destroyer: 	{redOffset:	-234, greenOffset: 	 21, blueOffset: -234, alphaOffset:  -70},
		Submarine:	{redOffset:   21, greenOffset: -234, blueOffset:  -81, alphaOffset:  -70},
	},
])

(def css $TTChat_ShipInfoText()
	(extends $FontFamilyDefaultBold)
	(extends $FontColorDefault)
	(fontSize = 12)
)

# battle\combat_log\combat_log.unbound
(def element CombatLogPanel() layout=true
	(scope
		(var battleInfoWatcher:gfx = "$datahub.getFirstWatcher(CC.battleInfo)")
		(var battleInfoEntity:gfx = "battleInfoWatcher.entity" (event "battleInfoWatcher.event"))
		(var battleType:str = "battleInfoEntity.battleInfo.battleType")
		(var isEventBattle:bool = "battleType == SC.Common.BATTLE_TYPES.EVENT_BATTLE")
		
		(var collection:gfx = "$datahub.getCollection(CC.avatar)")
		(var allyCollection:gfx = "collection ? collection.getChildByPath('team.ally.alive') : null" (event "collection.evChildAdded") (event "collection.evChildRemoved"))
		(var allyItems:array = "allyCollection ? allyCollection.items : null" (event "allyCollection.evAdded") (event "allyCollection.evRemoved"))
		(var itemsLength:number = "allyItems ? allyItems.length : 0")
		(var allTeammatesAreDead:number = "itemsLength == 0")

		(var spectatorStateWatcher:gfx = "$datahub.getFirstWatcher(CC.spectatorState)")
		(var spectatorStateEntity:gfx = "spectatorStateWatcher.entity" (event "spectatorStateWatcher.event"))
		(var spectatorStateValue:number = "spectatorStateEntity ? spectatorStateEntity.spectatorState.state : INVALID_SPECTATOR_STATE" (event "spectatorStateEntity.spectatorState.evStateChanged"))
		(var isSpectator:bool = "spectatorStateValue == SC.Common.SPECTATOR_STATE.TRAINING_SPECTATOR")
		(var isTeamSpectator:bool = "isEventBattle ? allTeammatesAreDead : isSpectator")

		# Mod
		(macro TT_GET_USERPREF)
		#
	)
	# Mod
	(controller $Instance renderer='TTChat_CombatLogPanelContent'
		(bind enabled "!isTeamSpectator")
		(args
			_userPrefsNum="_userPrefsNum"
		)
	)
	#
)

# battle\combat_log\combat_log.unbound
(def element TTChat_CombatLogPanelContent (_userPrefsNum:gfx=null) layout=true
	(scope
		(event evNewMessageEvent)

		(event evShowChatEvent)
		(event evShowChatWithAutoScrollEvent)
		(event evHideChatEvent)
		(event evDelayedHideChatEvent)

		(event evInputFocusInEvent)
		(event evInputFocusOutEvent)
	
		(event evContextMenuShowed)
		(event evContextMenuHidden)

		(macro MOUSE_HANDLER_SCOPE)
		(macro MOUSE_HANDLER_SCOPE "'chatInput_'")

		(macro GET_PREF 'enableBattleChat' "'ui.enableBattleChat'")

		(var selfAvatarWatcher:gfx = "$datahub.getFirstWatcher(CC.playerAvatar)")
		(var selfAvatarEntity:gfx = "selfAvatarWatcher.enity" (event "selfAvatarWatcher.event"))

		(var battleChatAndLog:gfx = "$datahub.getSingleComponent(CC.battleChatAndLog)")
		(var isInputFocused:bool = "battleChatAndLog.isInputFocused" (event "battleChatAndLog.evIsInputFocusedChanged"))
		(var currentChannelId:number = "battleChatAndLog.currentChannelId" (event "battleChatAndLog.evChannelChanged"))
		(var isChatDisabled:bool = "battleChatAndLog.isChatDisabled" (event "battleChatAndLog.evChannelChanged"))
		(var isTabDisabled:bool = "battleChatAndLog.isTabDisabled" (event "battleChatAndLog.evChannelChanged"))

		(var isDivisionChat:bool = "currentChannelId == SC.Channel.BATTLE_CHAT_CHANNEL_TYPE.DIVISION")
		(var isTeamChat:bool = "currentChannelId == SC.Channel.BATTLE_CHAT_CHANNEL_TYPE.TEAM")

		(var playerContextMenuVisible:bool = false)
		(bind playerContextMenuVisible "true" init=false (event "evContextMenuShowed"))
		(bind playerContextMenuVisible "false" init=false (event "evContextMenuHidden"))
		
		(var chatInputActive:bool = "enableBattleChat && isInputFocused")
		(var chatInputRollOver:bool = "chatInputActive || chatInput_rollOver || playerContextMenuVisible")

		(var isChatExpanded:bool = false)
		(bind isChatExpanded "true" init=false (event "evShowChatEvent") (event "evShowChatWithAutoScrollEvent"))
		(bind isChatExpanded "isInputFocused || rollOver || playerContextMenuVisible" init=false watch=false (event "evHideChatEvent"))

		(var battleChatAndLogMessages:gfx = "$datahub.getCollection(CC.battleChatAndLogMessage).child('sorted')")
		(var battleChatAndLogMessagesItems:gfx = "battleChatAndLogMessages.items" (event "battleChatAndLogMessages.evAdded"))
		(var battleChatAndLogMessagesCount:number = "battleChatAndLogMessagesItems.length" (event "battleChatAndLogMessages.evAdded"))

		(var chatInputTitleColor:number = "	isChatDisabled || !enableBattleChat	? SC.Ui_styles.SERVICE_COLORS.WHITE :
											isTeamChat							? SC.Ui_styles.SERVICE_COLORS.GREEN :
											isDivisionChat						? SC.Ui_styles.SERVICE_COLORS.YELLOW
																				: SC.Ui_styles.SERVICE_COLORS.WHITE")

		(var chatInputTitleText:str = "	isChatDisabled		? 'IDS_CHAT_DISABLED' :
										!enableBattleChat	? 'IDS_CHAT_SWITCH_ON' :
										isTeamChat			? tr('IDS_BATTLE_CHAT_TEAM') + ':' :
										isDivisionChat		? tr('IDS_LOBBY_CHAT_DIVISION') + ':'
															: tr('IDS_BATTLE_CHAT_GENERAL') + ':'")
	)

	(bindcall externalCall 'inputMapping.onAction' "['battleChat.shown', { }]" init=false watch=false on='addedToStage')
	(bindcall externalCall 'inputMapping.onAction' "['battleChat.rollOverChanged', { rollOver: rollOver }]" init=false watch=false (bind trigger "rollOver"))

	(macro MOUSE_EVENTS_DISPATCHER)
	
	(dispatch evNewMessageEvent dir="EventDirection.DOWN" args="{}" (event "battleChatAndLogMessages.evAdded"))

	(dispatch evShowChatEvent args="{}" (bind enabled "isChatExpanded") (event "evNewMessageEvent"))
	(dispatch evShowChatEvent args="{}" (event "evInputFocusInEvent"))

	(dispatch evShowChatWithAutoScrollEvent args="{}" (bind enabled "!isChatExpanded") (event "evNewMessageEvent"))

	(dispatch evInputFocusInEvent args="{}" on='addedToStage' (bind enabled "isInputFocused") (event "battleChatAndLog.evIsInputFocusedChanged"))
	(dispatch evInputFocusOutEvent args="{}" (bind enabled "!isInputFocused") (event "battleChatAndLog.evIsInputFocusedChanged"))

	(dispatch evDelayedHideChatEvent args="{}" (bind enabled "!rollOver") (bind trigger "rollOver"))
	(dispatch evDelayedHideChatEvent args="{}" (event "evContextMenuHidden"))
	(dispatch evDelayedHideChatEvent args="{}" (event "evNewMessageEvent"))
	(dispatch evDelayedHideChatEvent args="{}" (event "evInputFocusOutEvent"))

	(dispatch evHideChatEvent args="{}" delay="COMBAT_LOG_HIDE_DELAY" reset=true (event "evDelayedHideChatEvent"))

	
	(block
		(macro CHANGE_ALPHA_BY_TRIGGER_ANIM _duration="0.25" _fromAlpha=0 _toAlpha=1 _triggerExpression="isChatExpanded")

		(style
			(width = "COMBAT_LOG_WIDTH") (height = "COMBAT_LOG_HEIGHT")
			(align = "bottom")
		)

		
		(block
			(class $FullsizeAbsolute)
			(style
				(backgroundImage = 'url:../battle_hud/combat_log/chat_background.png')
				(backgroundSize = "fill")
				(scale9grid = "[4, 4, 1, 19]")
				(hitTest = false)
			)
		)

		
		(scrollArea
			(class $FullsizeAbsolute)
			
			
			(style
				(backgroundColor = 0x01000000)
				(align = "bottom")
				(bind hitTest "isChatExpanded")
			)

			(verticalSlider='ScrollBarVLight')
			(topShadow='ScrollAreaShadowTop')
			(bottomShadow='ScrollAreaShadowBottom')

			(activeControlsAlpha=0.7)
			(inactiveControlsAlpha=0.2)
			(animationDuration=0.2)
			(animationEasing="Easing.cubic_out")

			(hscrollPolicy='off')
			(vscrollPolicy='auto')
			(repeatController='battleChat')

			(content
				(name = 'txa_output')

				(style
					(width = "COMBAT_LOG_WIDTH")
				)

				(controller $Repeat renderer='TTChat_CombatLogMessageRenderer' name='battleChat'
					(bind enabled "battleChatAndLogMessagesCount > 0")
					(bind count "battleChatAndLogMessagesCount")
					# Mod
					(args "battleChatAndLogMessagesItems[$index]" _userPrefsNum="_userPrefsNum")
					#
				)
			)
			(bindcall scrollToEnd (event "evNewMessageEvent"))
		)
	)

	
	(block
		(macro MOUSE_EVENTS_DISPATCHER "'chatInput_'")

		(style
			(width = "COMBAT_LOG_INPUT_WIDTH") (height = "COMBAT_LOG_INPUT_HEIGHT")
			(marginLeft = -3px)
			(bind hitTest "!isChatDisabled && enableBattleChat")
		)

		(macro CHANGE_ALPHA_BY_TRIGGER_ANIM _duration="0.1" _fromAlpha=0.8 _toAlpha=1 _triggerExpression="chatInputActive")

		(block
			(class $FullsizeAbsolute)
			(style
				(align = "middle")
				(bind backgroundImage "'url:../battle_hud/combat_log/' + (isInputFocused	? 'chat_input_focused.png'
																							: 'chat_input_up.png')")
				(backgroundSize = "fill")
				(scale9grid = "[7, 7, 7, 14]")
			)

			(macro CHANGE_ALPHA_BY_TRIGGER_ANIM _duration="0.1" _fromAlpha=0.6 _toAlpha=1 _triggerExpression="chatInputRollOver")
			(hblock
				(name = 'txaHeader')
				(style
					(width = 100%)
					(paddingLeft = "S") (paddingRight = "S")
					(align = "middle")
				)

				
				(tf
					(class $TextDefaultBold13NM)
					(style
						(hitTest = false)
						(bind textColor "chatInputTitleColor")
					)
					(bind text "chatInputTitleText")
				)
				(block
					(style (marginLeft = "XS") (width = 100%))
					(element CombatLogTextInput _isChatAvailable="enableBattleChat && !isChatDisabled")
				)
			)
		)
	)
	(hblock
		(bind alpha "isInputFocused && enableBattleChat ? 1 : 0")
		(name = 'txtChatHelp')

		(style
			(position = "absolute") (bottom = -20px)
			(width = 100%) (align = "middle") (hitTest = false)
		)
		
		(block
			(style
				(marginRight = "XS")
			)
			(element HotKey
					_keyCode = "KEY_TAB"
					_size = "SIZE.SMALL"
					_isKeyActive = "false"
					_hotkeyState = "HotkeyState.DEFAULT"
			)
		)

		(tf
			(class $TextDefault13NM)
			(alpha = "TC")
			(text = 'IDS_TAB_CHANGE_CHANNEL')
		)
	)

	(element CombatChatMuteButton "isInputFocused" "!enableBattleChat"
		(style
			(position = "absolute")
			(right = "XXS")
			(bottom = -27px)
		)
	)
	(block
		(style
			(position = "absolute")
			(right = -20px) (bottom = 6px)
		)
		(element VoiceChatOutgoingIcon)
	)
)

# battle\combat_log\combat_log.unbound
(def element TTChat_CombatLogMessageRenderer(_messageEntity:gfx, _userPrefsNum:gfx=null) layout=true
	(scope
		(event evHideInfotip)

		(event evMenuItemClicked)

		(event evNewMessageEvent)

		(var battleChatEntity:gfx = "$datahub.getSingleEntity(CC.battleChatAndLog)")

		(var playerId:number = "_messageEntity.battleChatAndLogMessage.playerId")
		(var playerEntity:gfx = "$datahub.getPrimaryEntity(CC.avatar, playerId)")
		(var isBot:bool = "playerEntity && playerEntity.avatar.isBot")

		(var relationComponent:gfx = "playerEntity ? playerEntity.relation : null")
		(var isSelf:number = "relationComponent && relationComponent.value == SC.Battle.PLAYER_RELATION.SELF")
		(var isSysLogMessage:bool = "playerEntity == null")

		(var isContextMenuAvailable:bool = "!(isSelf || isSysLogMessage || isBot)")

		(var contextMenuVisible:bool = "false")

		(var mouse:gfx = "$datahub.getSingleComponent(CC.mouse)")
		(var isMouseActive:bool = "mouse.active" (event "mouse.evActiveChanged"))

		(var selfPlayer:gfx = "$datahub.getSingleEntity(CC.accountSelf)")

		# Mod
		(macro TT_GET_PREF_BOOL _varName="'isShipNameVisible'" 		_pref="TTChat_PREFS.SHIP_NAME_VISIBLE")
		(macro TT_GET_PREF_BOOL _varName="'isShipIconVisible'" 		_pref="TTChat_PREFS.SHIP_ICON_VISIBLE")
		(macro TT_GET_PREF_BOOL _varName="'isShipTierVisible'" 		_pref="TTChat_PREFS.SHIP_TIER_VISIBLE")
		(macro TT_GET_PREF_BOOL _varName="'isBoldFont'" 			_pref="TTChat_PREFS.BOLD_FONT")

		(var messageComponent:gfx = "_messageEntity.battleChatAndLogMessage")

		(var avatarComponent:gfx = "playerEntity ? playerEntity.avatar : null")
		(var shipNameUpper:str = "avatarComponent ? avatarComponent.ship.ref.ship.nameUpper : ''")
		(var subType:str = "avatarComponent ? avatarComponent.ship.ref.ship.subtype : ''")
		(var tier:str = "avatarComponent ? avatarComponent.ship.ref.ship.levelRome : ''")

		(var dataComponent:gfx = "_messageEntity.hasComponent(CC.mods_DataComponent) ? _messageEntity.mods_DataComponent : null" (event "_messageEntity.evAdded"))
		(var replacementData:dict = "dataComponent && dataComponent.data ? dataComponent.data : null" (event "dataComponent.evDataChanged"))
		(var isChatReplacementAvailable:bool = "replacementData")
		(var tooltipMessage:str = "isChatReplacementAvailable ? messageComponent.message : null")
		(var replacementHtmlMessage:str = "'message' in replacementData ? replacementData.message : null")
		(var originalHtmlMessage:str = "messageComponent.htmlText")
		(var htmlMessage:str = "isChatReplacementAvailable ? replacementHtmlMessage : originalHtmlMessage")
		#
	)

	(dispatch evHideInfotip args="{}" (bind trigger "isMouseActive") (event "evMenuItemClicked") (event "evNewMessageEvent"))

	(style (width = "COMBAT_LOG_MESSAGE_WIDTH"))

	# Mod
	(controller $Tooltip (renderer = 'TTChat_BattlePlayerTooltip')
		(args
			_playerEntity	= "playerEntity"
			_originalMessage= "tooltipMessage"
		)
		(macro DEFAULT_TOOLTIP_BEHAVIOUR "0")
		(cache=false)
	)
	#

	(controller $Tooltip (renderer = 'ContextMenuPlayer')
		(args _playerEntity="playerEntity" _selfPlayer="selfPlayer")
		(macro DEFAULT_MENU_BEHAVIOUR "evHideInfotip" "1")
		(cache=false)
	)

	(element DockSubmenuItem _selected="contextMenuVisible"
		(class $FullsizeAbsolute)
		(style (bind hitTest "isContextMenuAvailable"))
	)

	# Mod
	(block
		(style
			(width = 100%)
			(marginLeft = 4)
			(marginRight = 4)
			(marginTop = 1px)
			(marginBottom = 1px)
		)
		(hblock
			(bind visible "!isSysLogMessage && avatarComponent && (isShipNameVisible || isShipIconVisible || isShipTierVisible)")
			(style
				(width = 100%)
				(align = "middle|left")
				(marginBottom = -6px)
			)
			# Ship Name
			(tf
				(class $TTChat_ShipInfoText)
				(bind text "shipNameUpper")
				(bind visible "isShipNameVisible")
			)
			# Ship Icon
			(element TTChat_ShipIcon _subType="subType"
				(bind visible "isShipIconVisible")
			)
			# Tier
			(tf
				(class $TTChat_ShipInfoText)
				(bind text "tier")
				(bind visible "isShipTierVisible")
			)
		)

		# Main
		(tf
			(style
				(width = 100%)
				(leading = -3)
				(fontSize = 15)
				(hitTest = false)
				(styleSheet="'.ally {color:#4ce8aa} .enemy {color:#ff3600} .self {color:#ffcc66}'")
			)
			
			(bind class "isBoldFont ? '$FontFamilyDefaultBold' : '$FontFamilyDefault'")
			(bind htmlText "htmlMessage")
			(bindcall substitute imageOffset=5 substitutionMap="battleChatEntity.battleChatAndLog.substitutions" sourceText="htmlMessage" init=true)
		)
	)
	#
)

# tooltip\tooltip_player_battle.unbound
(def element TTChat_BattlePlayerTooltip (_playerEntity:gfx, _originalMessage:str=null, _isInPostBattle:bool=false, _isBot:bool=false) layout=true
	(scope
		(var playerDbId:number =	"_playerEntity ? _playerEntity.accountSimple.dbId : INVALID_PLAYER_AVATAR_ID")
		(var isSelf:bool =			"_playerEntity.accountSimple.isSelfPlayer")
		(var relation:number =		"_playerEntity.relation.value" (event "_playerEntity.relation.evChanged"))

		(var tkStatus:number =		"_playerEntity.avatar.tkStatus" (event "_playerEntity.avatar.evTeamkillStatusChanged"))
		(var ttkStatus:number =		"_playerEntity.avatar.ttkStatus" (event "_playerEntity.avatar.evTTKStatusChanged"))

		(var isEnemyPlayer:bool =	"relation == SC.Battle.PLAYER_RELATION.ENEMY")

		(var name:str =			"_playerEntity.avatar.name")
		(var pureName:str =		"_playerEntity.avatar.pureName")
		(var playerVoiceChatEntity:gfx = "$datahub.getPrimaryEntity(CC.playerVoiceState, pureName)")
		(var isMuted:bool =		"playerVoiceChatEntity ? playerVoiceChatEntity.playerVoiceState.isMuted : false" (event "playerVoiceChatEntity.playerVoiceState.evIsMutedChanged"))
		(macro GET_PREF 'selfVoiceChatEnabled' "'sound.voice.chat.enabled'")
		(var isInVoiceChat:bool ="playerVoiceChatEntity != null || (isSelf && selfVoiceChatEnabled)")
		(var isAlive:bool =		"_playerEntity.health.isAlive" (event "_playerEntity.health.evIsAliveChanged"))
		(var isLeaver:bool =	"_playerEntity.avatar.isLeaver" (event "_playerEntity.avatar.evIsLeaverChanged"))
		(var playerId:number =	"_playerEntity.avatar.id")
		(var mute:bool =		"_playerEntity.avatar.mute" (event "_playerEntity.avatar.evMuteChanged"))
		(var isBot:bool =		"_playerEntity.avatar.isBot")

		(var division:number =				"_playerEntity.divisionMember.division" (event "_playerEntity.divisionMember.evDivisionChanged"))
		(var isInSameDivision:bool =		"_playerEntity.divisionMember.isInSameDivision" (event "_playerEntity.divisionMember.evDivisionChanged"))
		(var isDivisionCommander:bool =		"_playerEntity.divisionMember.isDivisionCommander" (event "_playerEntity.divisionMember.evIsDivisionCommanderUpdated"))
		(var isInSameDivisionOnStart:bool = "_playerEntity.divisionMember.isInSameDivisionOnStart")

		(var inviteCooldown:number =		"_playerEntity.battleInvite.inviteCooldown" (event "_playerEntity.battleInvite.evInviteCooldownChanged"))
		(var invitationsEnabled:bool =		"_playerEntity.battleInvite.invitationsEnabled" (event "_playerEntity.battleInvite.evInvitationsEnabledChanged"))
		(var inviteCooldownEnabled:bool =	"_playerEntity.battleInvite.inviteCooldownEnabled" (event "_playerEntity.battleInvite.evInviteCooldownEnabledChanged"))

		(var playerRoleStr:str =			"isDivisionCommander	? tr('IDS_DIVISION_COMMANDER_C')
																	: tr('IDS_IN_DIVISION')")
		
		(var battleDataEntity:gfx = "$datahub.getSingleEntity(CC.battleData)")
		(var battleType:str = "battleDataEntity.battleInfo.battleType")

		(var invitedPlayerEntity:gfx = "_playerEntity.hasComponent(CC.playerInvitedToPrebattleInfo) ? _playerEntity : null")

		# Mod
		(var battleChatEntity:gfx = "$datahub.getSingleEntity(CC.battleChatAndLog)")
		#
	)

	(style (width = 320) (hitTest = false))

	(macro TOOLTIP_SYSTEM_DEFAULT_BACKGROUND)

	(element TOOLTIP_SYSTEM_DEFAULT_CONTAINER
		(element TooltypSystemPlayerStereotypeDogTag _playerEntity="_playerEntity"
			(style (width = 100%))
		)

		(block
			(bind visible "isInSameDivision")
			(style (width = 100%))
			(element TooltipSystemHorizontalDivider)
			(hblock
				(style (width = 100%) (align = "middle"))

				(element FormationPlayerIcon
					_isEmptySlot=false
					_isCommander="isDivisionCommander"
					_isReady=true
					_isInBattle=false
				)

				(tf
					(style (marginLeft = "S") (textColor = "SC.Ui_styles.SERVICE_COLORS.YELLOW"))
					(class $TextDefaultBoldNM)
					(bind text "playerRoleStr")
				)
			)
		)
		
		(block
			(bind visible "selfVoiceChatEnabled && !isEnemyPlayer && (isInSameDivision || battleType == SC.Common.BATTLE_TYPES.CLAN_BATTLE)")
			(style (width = 100%))
			(element TooltipSystemHorizontalDivider)
			(hblock
				(style (width = 100%) (align = "middle"))

				(mc icon_voice_chat_small
					(bindcall gotoAndStop "	!isInVoiceChat		? 'disabled' :
											isMuted				? 'muted'
																: 'speak'"
											init=true
					)
				)

				(tf
					(class $TextDefaultNM)
					(style (marginLeft = "SXS")
					(bind textColor "!isInVoiceChat || isMuted	? SC.Ui_styles.SERVICE_COLORS.ORANGE
																: 0xFFFFFFFF"))
					(bind text "isSelf			?	selfVoiceChatEnabled	? 	'IDS_VOICE_CHAT_ENABLED'
																			:	'IDS_VOICE_CHAT_DISABLED' :
								!isInVoiceChat	? 'IDS_PLAYER_IS_NOT_AVAILABLE_IN_VOICE_CHAT' :
								isMuted			? 'IDS_PLAYER_IS_MUTED_IN_VOICE_CHAT'
												: 'IDS_PLAYER_IS_AVAILABLE_IN_VOICE_CHAT'")
				)
			)
		)

		(block
			(style (width = 100%))
			(controller $Instance renderer='PlayerTooltipInvitationCountdown'
				(args
					_invitedPlayerEntity="invitedPlayerEntity"
					_text="'IDS_INVITED_IN_DIVISION'"
				)
				(bind enabled "invitedPlayerEntity")
			)
		)
		
		(block
			(style (width = 100%))
			(controller $Instance renderer='TooltipSystemHorizontalDivider'
				(bind enabled "!isSelf && !_isBot")
			)
		)
		(block
			(style (width = 100%))
			(controller $Instance renderer='TooltipSystemStatusLine'
				(bind enabled "!isSelf && !_isBot")
				(args
					_unifiedStatus = "SC.Ui_styles.UNIFIED_STATUS.MOUSE_RIGHT"
					_text = 'IDS_HINT_RIGHT_CLICK_FOR_CONTEXT_MENU'
				)
			)
		)

		(block
			(bind visible "_originalMessage")
			(style
				(width = 100%)
				(marginTop = 15px)
			)
			(tf
				(style
					(width = 100%)
					(leading = -3)
					(fontSize = 15)
					(styleSheet="'.ally {color:#4ce8aa} .enemy {color:#ff3600} .self {color:#ffcc66}'")
				)
				
				(class $FontFamilyDefault)
				(class $FontColorDefault)
				(bind htmlText "_originalMessage")
				# Mod
				(bindcall substitute imageOffset=5 substitutionMap="battleChatEntity.battleChatAndLog.substitutions" sourceText="_originalMessage" init=true)
				#
			)
		)
	)
)

(def element TTChat_ShipIcon(_subType:str)
	(style
		(width = 27px)
		(height = 0px)
		(align = "middle|center")
	)
	(block
		(style
			(width = "27px")
			(height = 27)
			(bind backgroundImage "'url:../battle_hud/markers/ship/icon_white_' + toLower(_subType) + '.png'")
		)
	)
)