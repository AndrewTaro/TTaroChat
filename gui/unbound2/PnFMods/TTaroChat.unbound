(def constant TT_CHAT_INSTALLED true) # For modconfig

(def constant TTChat_ELEMENT_NAME 'TTChat')

# AS3 htmlText does not support multiple classes in a single tag, apparently.
(def constant TTChat_BASE_HTML '<font color=\"%(color)s\" size=\"%(size)d\"><span class=\"%(weight)s\">%(message)s</span></font>')

(def constant TTChat_SHIP_ICON_COLOR_PRESET [
	#Use -(234-0x??)
	#None
	{
		Auxiliary:	{},
		AirCarrier:	{},
		Battleship:	{},
		Cruiser:	{},
		Destroyer: 	{},
		Submarine:	{},
	},
	#Aslain v1
	{
		Auxiliary:	{redOffset: -184, greenOffset: -134, blueOffset: -234, alphaOffset:    0},
		AirCarrier:	{redOffset: -106, greenOffset:  -64, blueOffset:   21, alphaOffset:    0},
		Battleship:	{redOffset:   21, greenOffset: -106, blueOffset: -106, alphaOffset:    0},
		Cruiser:	{redOffset:	  21, greenOffset: 	  0, blueOffset: -106, alphaOffset:    0},
		Destroyer: 	{redOffset:	 -64, greenOffset: 	 21, blueOffset: -106, alphaOffset:    0},
		Submarine:	{redOffset: -207, greenOffset:    4, blueOffset:   11, alphaOffset:    0},
	},
	#Aslain v2
	{
		Auxiliary:	{redOffset: -184, greenOffset: -134, blueOffset: -234, alphaOffset:    0},
		AirCarrier:	{redOffset:  -43, greenOffset: -106, blueOffset:   21, alphaOffset:    0},
		Battleship:	{redOffset:   21, greenOffset: -106, blueOffset: -106, alphaOffset:    0},
		Cruiser:	{redOffset:	  21, greenOffset: 	  0, blueOffset: -106, alphaOffset:    0},
		Destroyer: 	{redOffset:	 -64, greenOffset: 	 21, blueOffset: -106, alphaOffset:    0},
		Submarine:	{redOffset: -106, greenOffset:  -64, blueOffset:   21, alphaOffset:    0},
	},
	#AutoSpy
	{
		Auxiliary:	{redOffset: -184, greenOffset: -134, blueOffset: -234, alphaOffset: -128},
		AirCarrier:	{redOffset: -134, greenOffset: -134, blueOffset: -134, alphaOffset: -128},
		Battleship:	{redOffset: -234, greenOffset: -184, blueOffset: -154, alphaOffset: -128},
		Cruiser:	{redOffset: -89,  greenOffset: -159, blueOffset: -234, alphaOffset: -128},
		Destroyer: 	{redOffset: -184, greenOffset: -134, blueOffset: -184, alphaOffset: -128},
		Submarine:	{redOffset: -224, greenOffset: -224, blueOffset: -224, alphaOffset: -128},
	},
	#Roslich
	{
		Auxiliary:	{redOffset:   21, greenOffset: -234, blueOffset:   21, alphaOffset:    0},
		AirCarrier:	{redOffset:   21, greenOffset:   21, blueOffset: -234, alphaOffset:    0},
		Battleship:	{redOffset:   21, greenOffset: -234, blueOffset: -234, alphaOffset:    0},
		Cruiser:	{redOffset: -234, greenOffset: -234, blueOffset:   21, alphaOffset:    0},
		Destroyer: 	{redOffset: -234, greenOffset:    0, blueOffset: -234, alphaOffset:    0},
		Submarine:	{redOffset: -234, greenOffset:   21, blueOffset:   21, alphaOffset:    0},
	},
	#DeCease
	{
		Auxiliary:	{redOffset:   11, greenOffset: -235, blueOffset:   40, alphaOffset:    0},
		AirCarrier:	{redOffset:   -9, greenOffset:  -60, blueOffset: -119, alphaOffset:    0},
		Battleship:	{redOffset:  -65, greenOffset:  -74, blueOffset:   40, alphaOffset:    0},
		Cruiser:	{redOffset:   20, greenOffset:  -76, blueOffset: -128, alphaOffset:    0},
		Destroyer: 	{redOffset: -137, greenOffset:   11, blueOffset: -124, alphaOffset:    0},
		Submarine:	{redOffset: -255, greenOffset: -255, blueOffset: -255, alphaOffset:    0},
	},
	#Hakabase
	{
		Auxiliary:	{redOffset: -184, greenOffset: -134, blueOffset: -234, alphaOffset:  -70},
		AirCarrier:	{redOffset: -226, greenOffset:   -7, blueOffset:   21, alphaOffset:  -70},
		Battleship:	{redOffset:   21, greenOffset: -234, blueOffset: -234, alphaOffset:  -70},
		Cruiser:	{redOffset:	  21, greenOffset: 	 21, blueOffset: -234, alphaOffset:  -70},
		Destroyer: 	{redOffset:	-234, greenOffset: 	 21, blueOffset: -234, alphaOffset:  -70},
		Submarine:	{redOffset:   21, greenOffset: -234, blueOffset:  -81, alphaOffset:  -70},
	},
])

(def constant TTChat_STYLE_INDEX_TO_RENDERER [
	'TTChat_CombatLogMessageRendererStandard',
	'TTChat_CombatLogMessageRendererModern',
	'TTChat_CombatLogMessageRendererClassic',
])

(def constant TTChat_STYLE_SHEET "'
	.ally {color:#4ce8aa;}
	.enemy {color:#ff3600;}
	.self {color:#ffcc66;}
	.bold {font-family:$WWSDefaultFontBold;}
	.normal {font-family:$WWSDefaultFont;}
'")

# Data in Vanilla Scope
(def macro TTChat_GET_ORIGINAL_DATA ()
	(event evHideInfotip)

	(event evMenuItemClicked)

	(event evNewMessageEvent)

	(var battleChatEntity:gfx = "$datahub.getSingleEntity(CC.battleChatAndLog)")

	(var playerId:number = "_messageEntity.battleChatAndLogMessage.playerId")
	(var playerEntity:gfx = "$datahub.getPrimaryEntity(CC.avatar, playerId)")
	(var isBot:bool = "playerEntity && playerEntity.avatar.isBot")

	(var relationComponent:gfx = "playerEntity ? playerEntity.relation : null")
	(var isSelf:bool = "relationComponent && relationComponent.value == SC.Battle.PLAYER_RELATION.SELF")
	(var isSysLogMessage:bool = "playerEntity == null")

	(var isContextMenuAvailable:bool = "!(isSelf || isSysLogMessage || isBot)")

	(var contextMenuVisible:bool = "false")

	(var mouse:gfx = "$datahub.getSingleComponent(CC.mouse)")
	(var isMouseActive:bool = "mouse.active" (event "mouse.evActiveChanged"))

	(var selfPlayer:gfx = "$datahub.getSingleEntity(CC.accountSelf)")
)

(def macro TTChat_GET_MOD_DATA ()
	# Prefs
	# We do not use the in-game settings because it is difficult to modify
	(macro TT_GET_PREF_NUMBER	_varName="'shipInfoFontSize'"		_pref="TTChat_PREFS.SHIP_INFO.FONT_SIZE")
	(macro TT_GET_PREF_BOOL		_varName="'isShipInfoBold'"			_pref="TTChat_PREFS.SHIP_INFO.BOLD_FONT")
	(macro TT_GET_PREF_BOOL		_varName="'isShipNameVisible'" 		_pref="TTChat_PREFS.SHIP_INFO.NAME")
	(macro TT_GET_PREF_BOOL		_varName="'isShipIconVisible'" 		_pref="TTChat_PREFS.SHIP_INFO.ICON")
	(macro TT_GET_PREF_BOOL		_varName="'isShipTierVisible'" 		_pref="TTChat_PREFS.SHIP_INFO.TIER")

	(macro TT_GET_PREF_NUMBER	_varName="'senderFontSize'"			_pref="TTChat_PREFS.PLAYER_INFO.FONT_SIZE")
	(macro TT_GET_PREF_BOOL		_varName="'isSenderNameBold'"		_pref="TTChat_PREFS.PLAYER_INFO.BOLD_FONT")
	(macro TT_GET_PREF_BOOL		_varName="'isSenderNameVisible'"	_pref="TTChat_PREFS.PLAYER_INFO.NAME")
	(macro TT_GET_PREF_BOOL		_varName="'isClanNameVisible'" 		_pref="TTChat_PREFS.PLAYER_INFO.CLAN_TAG")

	(macro TT_GET_PREF_NUMBER	_varName="'messageFontSize'"		_pref="TTChat_PREFS.FONT_SIZE")
	(macro TT_GET_PREF_BOOL		_varName="'isMessageBold'"			_pref="TTChat_PREFS.BOLD_FONT")

	# Avatar
	(var avatarComponent:gfx = "playerEntity ? playerEntity.avatar : null")

	# Relation
	(var isAlly:bool = "relationComponent && relationComponent.value == SC.Battle.PLAYER_RELATION.ALLY")
	(var isEnemy:bool = "relationComponent && relationComponent.value == SC.Battle.PLAYER_RELATION.ENEMY")
	(var isInSameDivision:bool = "playerEntity && playerEntity.divisionMember ? playerEntity.divisionMember.isInSameDivision : false")
	(var isTeamKiller:bool = "avatarComponent ? avatarComponent.tkStatus : false")

	# Original Data
	(var messageComponent:gfx = "_messageEntity.battleChatAndLogMessage")
	(var originalMessage:str = "messageComponent.message")
	(var messageColor:str = "messageComponent.messageColor")
	(var senderColor:str = "messageComponent.senderColor")
	(var originalSenderName:str = "messageComponent.senderName")
	(var originalSenderShip:str = "messageComponent.senderShip")

	# Ship Info
	(var ship:gfx = "avatarComponent ? avatarComponent.ship.ref.ship : null" (event "avatarComponent.evShipRefChanged"))
	(var shipNameUpper:str = "ship ? ship.nameUpper : ''")
	(var subType:str = "ship ? ship.subtype : ''")
	(var tier:str = "ship ? ship.levelRome : ''")

	# External Data
	(var substDataComponent:gfx = "_messageEntity.hasComponent(CC.mods_DataComponent) ? _messageEntity.mods_DataComponent : null" (event "_messageEntity.evAdded"))
	(var substData:dict = "substDataComponent && substDataComponent.data ? substDataComponent.data : null" (event "substDataComponent.evDataChanged"))
	(var substMessage:str = "'message' in substData ? substData.message : null")

	# Main Message
	(var message:str = "substMessage ? substMessage : originalMessage")
	
	# Font Style
	(var senderFontWeight:str = "isSenderNameBold ? 'bold' : 'normal'")
	(var shipInfoFontWeight:str = "isShipInfoBold ? '$TTChat_SenderInfoTextBold' : '$TTChat_SenderInfoText'")
	(var messageFontWeight:str = "isMessageBold ? 'bold' : 'normal'")

	# Becomes a valid string only when the message is substituted
	(var originalHtmlForTooltip:str = "substMessage ?
		'<body>' +
			subst(TTChat_BASE_HTML, [], {color: messageColor,	weight: messageFontWeight,	size: messageFontSize,	message: originalMessage}) +
		'</body>'

		: null
	")
)

(def macro TTChat_CONTEXT_MENU ()
	(dispatch evHideInfotip args="{}" (bind trigger "isMouseActive") (event "evMenuItemClicked") (event "evNewMessageEvent"))

	# Mod
	(controller $Tooltip (renderer = 'TTChat_BattlePlayerTooltip')
		(args
			_playerEntity	= "playerEntity"
			_originalMessage= "originalHtmlForTooltip" # Becomes a valid string only when the message is substituted
		)
		(macro DEFAULT_TOOLTIP_BEHAVIOUR "0")
		(cache=false)
	)
	#

	(controller $Tooltip (renderer = 'ContextMenuPlayer')
		(args _playerEntity="playerEntity" _selfPlayer="selfPlayer")
		(macro DEFAULT_MENU_BEHAVIOUR "evHideInfotip" "1")
		(cache=false)
	)

	(element DockSubmenuItem _selected="contextMenuVisible"
		(class $FullsizeAbsolute)
		(style (bind hitTest "isContextMenuAvailable"))
	)
)

(def css $TTChat_SenderInfoTextBold()
	(extends $FontFamilyDefaultBold)
	(extends $FontColorDefault)
	(extends $FontEnableReadability)
	(fontSize = 12)
)

(def css $TTChat_SenderInfoText()
	(extends $FontFamilyDefault)
	(extends $FontColorDefault)
	(extends $FontEnableReadability)
	(fontSize = 12)
)

# battle\combat_log\combat_log.unbound
(def element CombatLogPanel()
	(visible = false)
)

(def element TTChat_CombatLogPanel() layout=true
	(scope
		(var battleInfoWatcher:gfx = "$datahub.getFirstWatcher(CC.battleInfo)")
		(var battleInfoEntity:gfx = "battleInfoWatcher.entity" (event "battleInfoWatcher.event"))
		(var battleType:str = "battleInfoEntity.battleInfo.battleType")
		(var isEventBattle:bool = "battleType == SC.Common.BATTLE_TYPES.EVENT_BATTLE")
		
		(var collection:gfx = "$datahub.getCollection(CC.avatar)")
		(var allyCollection:gfx = "collection ? collection.getChildByPath('team.ally.alive') : null" (event "collection.evChildAdded") (event "collection.evChildRemoved"))
		(var allyItems:array = "allyCollection ? allyCollection.items : null" (event "allyCollection.evAdded") (event "allyCollection.evRemoved"))
		(var itemsLength:number = "allyItems ? allyItems.length : 0")
		(var allTeammatesAreDead:number = "itemsLength == 0")

		(var spectatorStateWatcher:gfx = "$datahub.getFirstWatcher(CC.spectatorState)")
		(var spectatorStateEntity:gfx = "spectatorStateWatcher.entity" (event "spectatorStateWatcher.event"))
		(var spectatorStateValue:number = "spectatorStateEntity ? spectatorStateEntity.spectatorState.state : INVALID_SPECTATOR_STATE" (event "spectatorStateEntity.spectatorState.evStateChanged"))
		(var isSpectator:bool = "spectatorStateValue == SC.Common.SPECTATOR_STATE.TRAINING_SPECTATOR")
		(var isTeamSpectator:bool = "isEventBattle ? allTeammatesAreDead : isSpectator")

		# Mod
		(macro TT_GET_USERPREF)

		# From main hud
		(var avatarEntity:gfx = "$datahub.getSingleEntity(CC.playerAvatar)")
		(var healthComponent:gfx = "avatarEntity.health")
		(var isAlive:bool = "healthComponent ? healthComponent.isAlive : false" (event "healthComponent.evIsAliveChanged"))
		(var isSubmarineHudVisible:bool = "avatarEntity.avatar ? (avatarEntity.avatar.ship.ref.ship.subtype == ShipTypes.SUBMARINE) : false")

		(macro GET_PREF 'hearFoghorn' "'sound.foghorn.enabled'")

		(var selfVehicleEntity:gfx = "$datahub.getSingleEntity(CC.selfVehicle)")
		(var submarine:gfx = "isSubmarineHudVisible ? selfVehicleEntity.submarine : null")
		(var depthIndex:number = "submarine ? submarine.depthIndex : SC.Battle.DEPTH_STATE.SURFACE" (event "submarine.evDepthIndexChanged"))
		(var isUnderwater:number = "depthIndex > SC.Battle.DEPTH_STATE.PERISCOPE")
		#

		(macro TT_GET_PREF_BOOL		_varName="'isDragDropDisabled'"		_pref="TTChat_PREFS.DISABLE_DRAGDROP")
		(macro TT_GET_PREF_NUMBER	_varName="'widthScale'"				_pref="TTChat_PREFS.WIDTH_SCALE")
		(macro TT_GET_PREF_NUMBER	_varName="'heightScale'"			_pref="TTChat_PREFS.HEIGHT_SCALE")

		(var chatBoxWidth:number = "COMBAT_LOG_WIDTH * widthScale")
		(var chatBoxHeight:number = "COMBAT_LOG_HEIGHT * heightScale")

		(var draggableSize:number = "32px - 5px") # There is 5px margin in the image

		(macro STAGE_SIZE)
		(var defaultPosY:number = "stageHeight - 326 - chatBoxHeight - COMBAT_LOG_INPUT_HEIGHT") # 326 from main hud
		(var defaultPos:dict = "{'positionX': 10, 'positionY': max(0, defaultPosY)}")
		(macro DRAGGABLE_GET_DROP_POSITION _elementName="TTChat_ELEMENT_NAME" _defaultPosition="defaultPos")

		(var mouseComponent:gfx = "$datahub.getSingleComponent(CC.mouse)")
		(var isMouseActive:bool = "mouseComponent.active" (event "mouseComponent.evActiveChanged"))
		#
	)

	(style
		(bind width "stageWidth")
		(bind height "stageHeight")
	)

	# (element TTChat_MarkerMessageContent)
	# Experimental

	(block

		(style
			(position = "absolute")
			(bind left "dragPosX")
			(bind top "dragPosY")
			
			(bind width "chatBoxWidth")
			(bind height "chatBoxHeight")
		)

		# Config/Draggable
		(block
			(style
				(position = "absolute")
				(top = 100%)
				(left = 100%)
			)
			
			# Draggable Icon
			(controller $Instance renderer='TTChat_DraggableGripIcon'
				(bind enabled "!isDragDropDisabled")
				(args
					_elementName="TTChat_ELEMENT_NAME"
					_defaultPosition="defaultPos"
					_screenBoundsOffset="{left: chatBoxWidth, top: chatBoxHeight}"
				)
			)

			# Config
			(element TT_ConfigButtonElement _modIndex = "16" _tooltipPosition="borderNoTrack" _tooltipAlign="innerTop|outerRight"
				(style
					(bind left "isDragDropDisabled ? 0px : 30px")
				)
			)
		)

		# Mod
		(controller $Instance renderer='TTChat_CombatLogPanelContent'
			(bind enabled "!isTeamSpectator")
			(args
				_userPrefsNum = "_userPrefsNum"
				_chatBoxWidth = "chatBoxWidth"
				_chatBoxHeight= "chatBoxHeight"
			)
		)
		#

		# From main hud
		(block
			(style
				(hitTest = false)
				(position = "absolute")
				(bottom = 0)
				# Mod
				(width = 100%)
				#
				(alpha = "isUnderwater ? 0 : 1")
			)
			(controller $Animation
				(bindcall play to={alpha:1} action="kill" duration=0.2 (bind enabled "!isUnderwater"))
				(bindcall play to={alpha:0} action="kill" duration=0.2 (bind enabled "isUnderwater"))
			)
			(controller $Instance renderer='FogHornIndicator'
				(bind enabled "isAlive && hearFoghorn")
				# Mod
				(exprs
					(style
						(width = 100%)
					)
				)
				#
			)
		)
		#
	)
)

# battle\combat_log\combat_log.unbound
(def element TTChat_CombatLogPanelContent (_chatBoxWidth:number, _chatBoxHeight:number, _userPrefsNum:gfx=null) layout=true
	(scope
		(event evNewMessageEvent)

		(event evShowChatEvent)
		(event evShowChatWithAutoScrollEvent)
		(event evHideChatEvent)
		(event evDelayedHideChatEvent)
		(event evAfterHideChatEvent)

		(event evInputFocusInEvent)
		(event evInputFocusOutEvent)
	
		(event evContextMenuShowed)
		(event evContextMenuHidden)

		(macro MOUSE_HANDLER_SCOPE)
		(macro MOUSE_HANDLER_SCOPE "'chatInput_'")

		(macro GET_PREF 'enableBattleChat' "'ui.enableBattleChat'")

		(var selfAvatarWatcher:gfx = "$datahub.getFirstWatcher(CC.playerAvatar)")
		(var selfAvatarEntity:gfx = "selfAvatarWatcher.enity" (event "selfAvatarWatcher.event"))

		(var battleChatAndLog:gfx = "$datahub.getSingleComponent(CC.battleChatAndLog)")
		(var isInputFocused:bool = "battleChatAndLog.isInputFocused" (event "battleChatAndLog.evIsInputFocusedChanged"))
		(var currentChannelId:number = "battleChatAndLog.currentChannelId" (event "battleChatAndLog.evChannelChanged"))
		(var isChatDisabled:bool = "battleChatAndLog.numAvailableOutgoingChannels == 0" (event "battleChatAndLog.evChannelChanged"))
		(var isTabDisabled:bool = "battleChatAndLog.numAvailableOutgoingChannels <= 1" (event "battleChatAndLog.evChannelChanged"))

		(var preferences:gfx = "$datahub.getSingleComponent(CC.battleChatPreferences)")

		(var isDivisionChat:bool = "currentChannelId == SC.Channel.BATTLE_CHAT_CHANNEL_TYPE.DIVISION")
		(var isTeamChat:bool = "currentChannelId == SC.Channel.BATTLE_CHAT_CHANNEL_TYPE.TEAM")

		(var playerContextMenuVisible:bool = false)
		(bind playerContextMenuVisible "true" init=false (event "evContextMenuShowed"))
		(bind playerContextMenuVisible "false" init=false (event "evContextMenuHidden"))
		
		(var chatInputActive:bool = "enableBattleChat && isInputFocused")
		(var chatInputRollOver:bool = "chatInputActive || chatInput_rollOver || playerContextMenuVisible")

		(var isChatExpanded:bool = false)
		(bind isChatExpanded "true" init=false (event "evShowChatEvent") (event "evShowChatWithAutoScrollEvent"))
		(bind isChatExpanded "isInputFocused || rollOver || playerContextMenuVisible" init=false watch=false (event "evHideChatEvent"))

		(var battleChatAndLogMessages:gfx = "$datahub.getCollection(CC.battleChatAndLogMessage).child('sorted')")
		(var battleChatAndLogMessagesItems:gfx = "battleChatAndLogMessages.items" (event "battleChatAndLogMessages.evAdded") (event "battleChatAndLogMessages.evRemoved"))
		(var battleChatAndLogMessagesCount:number = "battleChatAndLogMessagesItems.length" (event "battleChatAndLogMessages.evAdded") (event "battleChatAndLogMessages.evRemoved"))

		(var chatInputTitleColor:number = "	isChatDisabled || !enableBattleChat	? SC.Ui_styles.SERVICE_COLORS.WHITE :
											isTeamChat							? SC.Ui_styles.SERVICE_COLORS.GREEN :
											isDivisionChat						? SC.Ui_styles.SERVICE_COLORS.YELLOW
																				: SC.Ui_styles.SERVICE_COLORS.WHITE")

		(var chatInputTitleText:str = "	isDivisionChat && isChatDisabled ? 'IDS_CHAT_DIVISION_BUT_NO_DIVISION' :
										isChatDisabled		? 'IDS_CHAT_DISABLED' :
										!enableBattleChat	? 'IDS_CHAT_SWITCH_ON' :
										isTeamChat			? tr('IDS_BATTLE_CHAT_TEAM') + ':' :
										isDivisionChat		? tr('IDS_LOBBY_CHAT_DIVISION') + ':'
															: tr('IDS_BATTLE_CHAT_GENERAL') + ':'")

		# Mod
		(var chatContentWidth:number = "_chatBoxWidth - COMBAT_LOG_SCROLL_BAR_WIDTH") # COMBAT_LOG_MESSAGE_WIDTH
		(var chatInputWidth:number = "_chatBoxWidth + (COMBAT_LOG_INPUT_WIDTH - COMBAT_LOG_WIDTH)") # BG has 3px white margins on both sides
		#
	)

	(bindcall externalCall 'inputMapping.onAction' "['battleChat.shown', { }]" init=false watch=false on='addedToStage')
	(bindcall externalCall 'inputMapping.onAction' "['battleChat.rollOverChanged', { rollOver: rollOver }]" init=false watch=false (bind trigger "rollOver"))

	(bindcall	externalCall 'direct.action' "['battleChat.expandedChanged', { expanded: true }]"
				init=false watch=false (event "evShowChatEvent"))

	(bindcall	externalCall 'direct.action' "['battleChat.expandedChanged', { expanded: false }]"
				init=false watch=false (event "evAfterHideChatEvent"))

	(macro MOUSE_EVENTS_DISPATCHER)
	
	(dispatch evNewMessageEvent dir="EventDirection.DOWN" args="{}" (event "battleChatAndLogMessages.evAdded"))

	(dispatch evShowChatEvent args="{}" (bind enabled "isChatExpanded") (event "evNewMessageEvent"))
	(dispatch evShowChatEvent args="{}" (event "evInputFocusInEvent"))

	(dispatch evShowChatWithAutoScrollEvent args="{}" (bind enabled "!isChatExpanded") (event "evNewMessageEvent"))

	(dispatch evInputFocusInEvent args="{}" on='addedToStage' (bind enabled "isInputFocused") (event "battleChatAndLog.evIsInputFocusedChanged"))
	(dispatch evInputFocusOutEvent args="{}" (bind enabled "!isInputFocused") (event "battleChatAndLog.evIsInputFocusedChanged"))

	(dispatch evDelayedHideChatEvent args="{}" (bind enabled "!rollOver") (bind trigger "rollOver"))
	(dispatch evDelayedHideChatEvent args="{}" (event "evContextMenuHidden"))
	(dispatch evDelayedHideChatEvent args="{}" (event "evNewMessageEvent"))
	(dispatch evDelayedHideChatEvent args="{}" (event "evInputFocusOutEvent"))

	(dispatch evHideChatEvent args="{}" delay="COMBAT_LOG_HIDE_DELAY" reset=true (event "evDelayedHideChatEvent"))
	(dispatch evAfterHideChatEvent args="{}" delay="COMBAT_LOG_HIDE_DELAY + 1" reset=true (event "evDelayedHideChatEvent"))


	(block
		(macro CHANGE_ALPHA_BY_TRIGGER_ANIM _duration="0.25" _fromAlpha=0 _toAlpha=1 _triggerExpression="isChatExpanded")

		(style
			# Mod
			(bind width "_chatBoxWidth")
			(bind height "_chatBoxHeight")
			#
			(align = "bottom")
		)

		
		(block
			(class $FullsizeAbsolute)
			(style
				(backgroundImage = 'url:../battle_hud/combat_log/chat_background.png')
				(backgroundSize = "fill")
				(scale9grid = "[4, 4, 1, 19]")
				(hitTest = false)
			)
		)

		
		(scrollArea
			(class $FullsizeAbsolute)
			
			
			(style
				(backgroundColor = 0x01000000)
				(align = "bottom")
				(bind hitTest "isChatExpanded")
			)

			(verticalSlider='ScrollBarVLight')
			(topShadow='ScrollAreaShadowTop')
			(bottomShadow='ScrollAreaShadowBottom')

			(activeControlsAlpha=0.7)
			(inactiveControlsAlpha=0.2)
			(animationDuration=0.2)
			(animationEasing="Easing.cubic_out")

			(hscrollPolicy='off')
			(vscrollPolicy='auto')
			(repeatController='battleChat')

			(content
				(name = 'txa_output')

				(style
					(bind width "_chatBoxWidth")
				)

				(controller $Repeat renderer='TTChat_CombatLogMessageWrapper' name='battleChat'
					(bind enabled "battleChatAndLogMessagesCount > 0")
					(bind count "battleChatAndLogMessagesCount")
					# Mod
					(args
						_messageEntity	= "battleChatAndLogMessagesItems[$index]"
						_userPrefsNum	= "_userPrefsNum"
					)
					(exprs
						(style
							(bind width "chatContentWidth")
						)
					)
					#
				)
			)
			(bindcall scrollToEnd (event "evNewMessageEvent"))
		)
	)

	
	(block
		(macro MOUSE_EVENTS_DISPATCHER "'chatInput_'")

		(style
			# Mod
			(bind width "chatInputWidth")
			(height = "COMBAT_LOG_INPUT_HEIGHT")
			(marginLeft = -3px)
			(bind hitTest "!isChatDisabled && enableBattleChat")
			#
		)

		(macro CHANGE_ALPHA_BY_TRIGGER_ANIM _duration="0.1" _fromAlpha=0.8 _toAlpha=1 _triggerExpression="chatInputActive")

		(block
			(class $FullsizeAbsolute)
			(style
				(align = "middle")
				(bind backgroundImage "'url:../battle_hud/combat_log/' + (isInputFocused	? 'chat_input_focused.png'
																							: 'chat_input_up.png')")
				(backgroundSize = "fill")
				(scale9grid = "[7, 7, 7, 14]")
			)

			(macro CHANGE_ALPHA_BY_TRIGGER_ANIM _duration="0.1" _fromAlpha=0.6 _toAlpha=1 _triggerExpression="chatInputRollOver")
			(hblock
				(name = 'txaHeader')
				(style
					(width = 100%)
					(paddingLeft = "S") (paddingRight = "S")
					(align = "middle")
				)

				
				(tf
					(class $TextDefaultBold13NM)
					(style
						(hitTest = false)
						(bind textColor "chatInputTitleColor")
					)
					(bind text "chatInputTitleText")
				)
				(block
					(style (marginLeft = "XS") (width = 100%))
					(element CombatLogTextInput _isChatAvailable="enableBattleChat && !isChatDisabled")
				)
			)
		)
	)
	(hblock
		(bind alpha "isInputFocused && enableBattleChat && !isTabDisabled ? 1 : 0")
		(name = 'txtChatHelp')

		(style
			(position = "absolute") (bottom = -20px)
			(width = 100%) (align = "middle") (hitTest = false)
		)
		
		(block
			(style
				(marginRight = "XS")
			)
			(element HotKey
					_keyCode = "KEY_TAB"
					_size = "SIZE.SMALL"
					_isKeyActive = false
					_hotkeyState = "HotkeyState.DEFAULT"
			)
		)

		(tf
			(class $TextDefault13NM)
			(alpha = "TC")
			(text = 'IDS_TAB_CHANGE_CHANNEL')
		)
	)
	# Mod
	# (element CombatChatSettingsButton
	# 	(style
	# 		(position = "absolute")
	# 		(bottom = "S")
	# 		(right = 0)
	# 	)
	# )
)

(def element TTChat_CombatLogMessageWrapper (_messageEntity:gfx, _userPrefsNum:gfx=null) layout=true
	(scope
		(macro TT_GET_PREF_NUMBER	_varName="'styleIndexPref'"		_pref="TTChat_PREFS.STYLE_INDEX")
		(var styleIndex:number = "styleIndexPref < TTChat_STYLE_INDEX_TO_RENDERER.length ? styleIndexPref : 0")
		(var renderer:str = "TTChat_STYLE_INDEX_TO_RENDERER[styleIndex]")
	)
	(controller $Instance
		(bind renderer "renderer")
		(args
			_messageEntity	= "_messageEntity"
			_userPrefsNum	= "_userPrefsNum"
		)
		(exprs
			(style
				(width = 100%)
			)
		)
	)
)

# battle\combat_log\combat_log.unbound
(def element TTChat_CombatLogMessageRendererStandard(_messageEntity:gfx, _userPrefsNum:gfx=null) layout=true
	(scope
		(macro TTChat_GET_ORIGINAL_DATA)
		(macro TTChat_GET_MOD_DATA)

		(var shipIconPrefix:str = "
			isEnemy	? 'e' :
			isAlly	? isInSameDivision	? 's'
										: isTeamKiller	? 'ba'
														: 'b'
					: 'a'
		")
		(var shipIconPostfix:str = "
			subType == SC.Common.SHIP_TYPE.AIRCARRIER	? '0' :
			subType == SC.Common.SHIP_TYPE.BATTLESHIP	? '1' :
			subType == SC.Common.SHIP_TYPE.CRUISER		? '2' :
			subType == SC.Common.SHIP_TYPE.DESTROYER 	? '3' :
			subType == SC.Common.SHIP_TYPE.AUXILIARY	? '4'
														: '5'
		")
		(var senderShip:str = "
			originalSenderShip	? 
				(isShipIconVisible ? ('[' + shipIconPrefix + shipIconPostfix + ']') : '') +
				(isShipTierVisible ? (tier + ' ') : '') +
				(isShipNameVisible ? shipNameUpper : '')
								: ''
		")

		# senderText Name
		(var senderName:str = "
			isSenderNameVisible ? avatarComponent	? isClanNameVisible	? avatarComponent.name
																		: avatarComponent.pureName
													: originalSenderName
								: ''
		")
		(var marginText:str = "senderName && senderShip && !isShipIconVisible ? ' ' : ''")
		(var senderText:str = "	isSelf ? tr('IDS_BATTLE_CHAT_YOU') + ' ' :
								!(senderName || senderShip) ? '' :
								!senderShip && senderName ? senderName + ': ' :
								senderName + marginText + senderShip + ': '
		")

		# ~~Cannot use `subst` to embed the message because our dearest friend snprintf() fails to format the string if it contains unescaped single quote '~~
		# ~~"Do not say \"don't\"" (because it breaks the feeling of C code)~~
		#
		# Apparently they fixed it? How? Like, They read this? I don't think so but am happy anyway
		(var senderHtml:str = "senderText && senderText != ': '
			? subst(TTChat_BASE_HTML, [], {color: senderColor,	weight: senderFontWeight,	size: senderFontSize,	message: senderText})
			: ''
		")
		(var messageHtml:str = "subst(TTChat_BASE_HTML, [], {color: messageColor,	weight: messageFontWeight,	size: messageFontSize,	message: message})")
		(var htmlText:str = "'<body>' + senderHtml + messageHtml + '</body>'")
		#
	)

	(macro TTChat_CONTEXT_MENU)

	# Mod
	(block
		(style
			(width = 100%)
			(marginLeft = 4px)
			(marginRight = 4px)
			(marginTop = -1px)
			(hitTest = false)
		)

		# Main
		(tf
			(style
				(width = 100%)
				(leading = -3)
				(styleSheet = "TTChat_STYLE_SHEET")
			)
			
			(class $FontFamilyDefault)
			(bind htmlText "htmlText")
			(bindcall substitute imageOffset=5 substitutionMap="battleChatEntity.battleChatAndLog.substitutions" sourceText="htmlText" init=true)
		)
	)
	#
)

(def element TTChat_CombatLogMessageRendererModern(_messageEntity:gfx, _userPrefsNum:gfx=null) layout=true
	(scope
		(macro TTChat_GET_ORIGINAL_DATA)
		(macro TTChat_GET_MOD_DATA)

		(var shipIconPrefix:str = "
			isEnemy	? 'e' :
			isAlly	? isInSameDivision	? 's'
										: isTeamKiller	? 'ba'
														: 'b'
					: 'a'
		")
		(var shipIconPostfix:str = "
			subType == SC.Common.SHIP_TYPE.AIRCARRIER	? '0' :
			subType == SC.Common.SHIP_TYPE.BATTLESHIP	? '1' :
			subType == SC.Common.SHIP_TYPE.CRUISER		? '2' :
			subType == SC.Common.SHIP_TYPE.DESTROYER 	? '3' :
			subType == SC.Common.SHIP_TYPE.AUXILIARY	? '4' :
			subType == SC.Common.SHIP_TYPE.SUBMARINE	? '5'
														: ''
		")
		(var senderShip:str = "
			originalSenderShip	? 
				(isShipIconVisible ? ('[' + shipIconPrefix + shipIconPostfix + ']') : '') +
				(isShipTierVisible ? (tier + ' ') : '') +
				(isShipNameVisible ? shipNameUpper : '')
								: ''
		")

		# senderText Name
		(var senderName:str = "
			isSenderNameVisible ? avatarComponent	? isClanNameVisible	? avatarComponent.name
																		: avatarComponent.pureName
													: originalSenderName
								: ''
		")
		(var marginText:str = "senderName && senderShip && !isShipIconVisible ? ' ' : ''")
		(var senderText:str = "isSelf	? tr('IDS_BATTLE_CHAT_YOU') + ' ' :
										!(senderName || senderShip) ? '' :
										!senderShip && senderName ? senderName + ': ' :
										senderName + marginText + senderShip + ': '
		")

		# ~~Cannot use `subst` to embed the message because our dearest friend snprintf() fails to format the string if it contains unescaped single quote '~~
		# ~~"Do not say \"don't\"" (because it breaks the feeling of C code)~~
		#
		# Apparently they fixed it? How? Like, They read this? I don't think so but am happy anyway
		(var senderHtml:str = "senderText && senderText != ': '
					? '<body>' + subst(TTChat_BASE_HTML, [], {color: senderColor,	weight: senderFontWeight,	size: senderFontSize,	message: senderText}) + '</body>'
					: ''
		")
		(var messageColorModded:str = "originalSenderShip ? '#ffffff' : messageColor")
		(var messageHtml:str = "subst(TTChat_BASE_HTML, [], {color: messageColorModded,	weight: messageFontWeight,	size: messageFontSize,	message: message})")
		(var htmlText:str = "'<body>' + messageHtml + '</body>'")
		#
	)

	(macro TTChat_CONTEXT_MENU)

	# Mod
	(block
		(style
			(width = 100%)
			(marginLeft = 4px)
			(marginRight = 4px)
			(marginTop = 2px)
			(marginBottom = 2px)
			(hitTest = false)
		)

		# BG
		(block
			(style
				(height = 100%)
				(position = "absolute")
				(width = 2px)
				(marginLeft = -3px)
				(backgroundSize = "fill")
				(bind backgroundColor "toNumber('0xff' + messageColor[1] + messageColor[2] + messageColor[3] + messageColor[4] + messageColor[5] + messageColor[6])")
			)
		)

		# Ship
		(tf
			(bind visible "senderHtml")
			(style
				(width = 100%)
				(leading = -3)
				(marginTop = -5px)
				(marginBottom = -5px)
				(styleSheet = "TTChat_STYLE_SHEET")
			)
			
			(class $FontFamilyDefault)
			(bind htmlText "senderHtml")
			(bindcall substitute imageOffset=5 substitutionMap="battleChatEntity.battleChatAndLog.substitutions" sourceText="senderHtml" init=true)
		)

		# Main
		(tf
			(style
				(width = 100%)
				(leading = -3)
				(styleSheet = "TTChat_STYLE_SHEET")
				(marginTop = -3px)
				(marginBottom = -3px)
			)
			
			(class $FontFamilyDefault)
			(bind htmlText "htmlText")
			(bindcall substitute imageOffset=5 substitutionMap="battleChatEntity.battleChatAndLog.substitutions" sourceText="htmlText" init=true)
		)
	)
	#
)

(def element TTChat_CombatLogMessageRendererClassic(_messageEntity:gfx, _userPrefsNum:gfx=null) layout=true
	(scope
		(macro TTChat_GET_ORIGINAL_DATA)
		(macro TTChat_GET_MOD_DATA)

		# senderText Name
		(var senderName:str = "avatarComponent	? isClanNameVisible	? avatarComponent.name
																	: avatarComponent.pureName
												: originalSenderName
		")
		(var senderText:str = "isSelf	? tr('IDS_BATTLE_CHAT_YOU') + ' '
										: !(senderName && isSenderNameVisible) ? ''
										: senderName + ': '
		")

		# ~~Cannot use `subst` to embed the message because our dearest friend snprintf() fails to format the string if it contains unescaped single quote '~~
		# ~~"Do not say \"don't\"" (because it breaks the feeling of C code)~~
		#
		# Apparently they fixed it? How? Like, They read this? I don't think so but am happy anyway
		(var senderHtml:str = "
			senderText	? subst(TTChat_BASE_HTML, [], {color: senderColor,	weight: senderFontWeight,	size: senderFontSize,	message: senderText})
						: ''
		")
		(var messageHtml:str = "subst(TTChat_BASE_HTML, [], {color: messageColor,	weight: messageFontWeight,	size: messageFontSize,	message: message})")
		(var htmlText:str = "'<body>' + senderHtml + messageHtml + '</body>'")
		#
	)

	(macro TTChat_CONTEXT_MENU)

	# Mod
	(block
		(style
			(width = 100%)
			(marginLeft = 4px)
			(marginRight = 4px)
			(marginTop = 1px)
			(marginBottom = 1px)
			(hitTest = false)
		)
		(hblock
			(bind visible "originalSenderShip && (isShipNameVisible || isShipIconVisible || isShipTierVisible)")
			(style
				(width = 100%)
				(align = "middle|left")
				(marginBottom = -6px)
			)
			# Ship Name
			(tf
				(bind class "shipInfoFontWeight")
				(bind text "shipNameUpper")
				(bind visible "isShipNameVisible")
				(style
					(bind fontSize "shipInfoFontSize")
				)
			)
			# Ship Icon
			(element TTChat_ShipIcon _subType="subType"
				(bind visible "isShipIconVisible")
			)
			# Tier
			(tf
				(bind class "shipInfoFontWeight")
				(bind text "tier")
				(bind visible "isShipTierVisible")
				(style
					(bind fontSize "shipInfoFontSize")
				)
			)
		)

		# Main
		(tf
			(style
				(width = 100%)
				(leading = -3)
				(styleSheet = "TTChat_STYLE_SHEET")
			)
			
			(class $FontFamilyDefault)
			(bind htmlText "htmlText")
			(bindcall substitute imageOffset=5 substitutionMap="battleChatEntity.battleChatAndLog.substitutions" sourceText="htmlText" init=true)
		)
	)
	#
)

# tooltip\tooltip_player_battle.unbound
(def element TTChat_BattlePlayerTooltip (_playerEntity:gfx, _originalMessage:str=null, _isInPostBattle:bool=false, _isBot:bool=false) layout=true
	(scope
		(var playerDbId:number =	"_playerEntity ? _playerEntity.accountSimple.dbId : INVALID_PLAYER_AVATAR_ID")
		(var isSelf:bool =			"_playerEntity.accountSimple.isSelfPlayer")
		(var relation:number =		"_playerEntity.relation.value" (event "_playerEntity.relation.evChanged"))

		(var tkStatus:number =		"_playerEntity.avatar.tkStatus" (event "_playerEntity.avatar.evTeamkillStatusChanged"))
		(var ttkStatus:number =		"_playerEntity.avatar.ttkStatus" (event "_playerEntity.avatar.evTTKStatusChanged"))

		(var isEnemyPlayer:bool =	"relation == SC.Battle.PLAYER_RELATION.ENEMY")

		(var name:str =			"_playerEntity.avatar.name")
		(var pureName:str =		"_playerEntity.avatar.pureName")
		(var playerVoiceChatEntity:gfx = "$datahub.getPrimaryEntity(CC.playerVoiceState, pureName)")
		(var isMuted:bool =		"playerVoiceChatEntity ? playerVoiceChatEntity.playerVoiceState.isMuted : false" (event "playerVoiceChatEntity.playerVoiceState.evIsMutedChanged"))
		(macro GET_PREF 'selfVoiceChatEnabled' "'sound.voice.chat.enabled'")
		(var isInVoiceChat:bool ="playerVoiceChatEntity != null || (isSelf && selfVoiceChatEnabled)")
		(var isAlive:bool =		"_playerEntity.health.isAlive" (event "_playerEntity.health.evIsAliveChanged"))
		(var isLeaver:bool =	"_playerEntity.avatar.isLeaver" (event "_playerEntity.avatar.evIsLeaverChanged"))
		(var playerId:number =	"_playerEntity.avatar.id")
		(var mute:bool =		"_playerEntity.avatar.mute" (event "_playerEntity.avatar.evMuteChanged"))
		(var isBot:bool =		"_playerEntity.avatar.isBot")

		(var division:number =				"_playerEntity.divisionMember.division" (event "_playerEntity.divisionMember.evDivisionChanged"))
		(var isInSameDivision:bool =		"_playerEntity.divisionMember.isInSameDivision" (event "_playerEntity.divisionMember.evDivisionChanged"))
		(var isDivisionCommander:bool =		"_playerEntity.divisionMember.isDivisionCommander" (event "_playerEntity.divisionMember.evIsDivisionCommanderUpdated"))
		(var isInSameDivisionOnStart:bool = "_playerEntity.divisionMember.isInSameDivisionOnStart")

		(var inviteCooldown:number =		"_playerEntity.battleInvite.inviteCooldown" (event "_playerEntity.battleInvite.evInviteCooldownChanged"))
		(var invitationsEnabled:bool =		"_playerEntity.battleInvite.invitationsEnabled" (event "_playerEntity.battleInvite.evInvitationsEnabledChanged"))
		(var inviteCooldownEnabled:bool =	"_playerEntity.battleInvite.inviteCooldownEnabled" (event "_playerEntity.battleInvite.evInviteCooldownEnabledChanged"))

		(var playerRoleStr:str =			"isDivisionCommander	? tr('IDS_DIVISION_COMMANDER_C')
																	: tr('IDS_IN_DIVISION')")
		
		(var battleDataEntity:gfx = "$datahub.getSingleEntity(CC.battleData)")
		(var battleType:str = "battleDataEntity.battleInfo.battleType")

		(var invitedPlayerEntity:gfx = "_playerEntity.hasComponent(CC.playerInvitedToPrebattleInfo) ? _playerEntity : null")

		# Mod
		(var battleChatEntity:gfx = "$datahub.getSingleEntity(CC.battleChatAndLog)")
		#
	)

	(style (width = 320) (hitTest = false))

	(macro TOOLTIP_SYSTEM_DEFAULT_BACKGROUND)

	(element TOOLTIP_SYSTEM_DEFAULT_CONTAINER
		(element TooltypSystemPlayerStereotypeDogTag _playerEntity="_playerEntity"
			(style (width = 100%))
		)

		(block
			(bind visible "isInSameDivision")
			(style (width = 100%))
			(element TooltipSystemHorizontalDivider)
			(hblock
				(style (width = 100%) (align = "middle"))

				(element FormationPlayerIcon
					_isEmptySlot=false
					_isCommander="isDivisionCommander"
					_isReady=true
					_isInBattle=false
				)

				(tf
					(style (marginLeft = "S") (textColor = "SC.Ui_styles.SERVICE_COLORS.YELLOW"))
					(class $TextDefaultBoldNM)
					(bind text "playerRoleStr")
				)
			)
		)
		
		(block
			(bind visible "selfVoiceChatEnabled && !isEnemyPlayer && (isInSameDivision || battleType == SC.Common.BATTLE_TYPES.CLAN_BATTLE)")
			(style (width = 100%))
			(element TooltipSystemHorizontalDivider)
			(hblock
				(style (width = 100%) (align = "middle"))

				(mc icon_voice_chat_small
					(bindcall gotoAndStop "	!isInVoiceChat		? 'disabled' :
											isMuted				? 'muted'
																: 'speak'"
											init=true
					)
				)

				(tf
					(class $TextDefaultNM)
					(style (marginLeft = "SXS")
					(bind textColor "!isInVoiceChat || isMuted	? SC.Ui_styles.SERVICE_COLORS.ORANGE
																: 0xFFFFFFFF"))
					(bind text "isSelf			?	selfVoiceChatEnabled	? 	'IDS_VOICE_CHAT_ENABLED'
																			:	'IDS_VOICE_CHAT_DISABLED' :
								!isInVoiceChat	? 'IDS_PLAYER_IS_NOT_AVAILABLE_IN_VOICE_CHAT' :
								isMuted			? 'IDS_PLAYER_IS_MUTED_IN_VOICE_CHAT'
												: 'IDS_PLAYER_IS_AVAILABLE_IN_VOICE_CHAT'")
				)
			)
		)

		(block
			(style (width = 100%))
			(controller $Instance renderer='PlayerTooltipInvitationCountdown'
				(args
					_invitedPlayerEntity="invitedPlayerEntity"
					_text="'IDS_INVITED_IN_DIVISION'"
				)
				(bind enabled "invitedPlayerEntity")
			)
		)
		
		(block
			(style (width = 100%))
			(controller $Instance renderer='TooltipSystemHorizontalDivider'
				(bind enabled "!isSelf && !_isBot")
			)
		)
		(block
			(style (width = 100%))
			(controller $Instance renderer='TooltipSystemStatusLine'
				(bind enabled "!isSelf && !_isBot")
				(args
					_unifiedStatus = "SC.Ui_styles.UNIFIED_STATUS.MOUSE_RIGHT"
					_text = 'IDS_HINT_RIGHT_CLICK_FOR_CONTEXT_MENU'
				)
			)
		)

		(block
			(bind visible "_originalMessage")
			(style
				(width = 100%)
				(marginTop = 15px)
			)
			(tf
				(style
					(width = 100%)
					(leading = -3)
					(fontSize = 15)
					(styleSheet = "TTChat_STYLE_SHEET")
				)
				
				(class $FontFamilyDefault)
				(class $FontColorDefault)
				(bind htmlText "_originalMessage")
				# Mod
				(bindcall substitute imageOffset=5 substitutionMap="battleChatEntity.battleChatAndLog.substitutions" sourceText="_originalMessage" init=true)
				#
			)
		)
	)
)

(def element TTChat_ShipIcon(_subType:str)
	(style
		(width = 27px)
		(height = 0px)
		(align = "middle|center")
	)
	(block
		(style
			(width = "27px")
			(height = 27)
			(bind backgroundImage "'url:../battle_hud/markers/ship/icon_white_' + toLower(_subType) + '.png'")
		)
	)
)

(def element TTChat_DraggableGripIcon(_elementName:str, _defaultPosition:dict, _screenBoundsOffset:dict)
	(scope
		(var draggableSize:number = "32px - 5px") # There is 5px margin in the image

		(var mouseComponent:gfx = "$datahub.getSingleComponent(CC.mouse)")
		(var isMouseActive:bool = "mouseComponent.active" (event "mouseComponent.evActiveChanged"))
	)

	(element ModDraggableElement
		_elementName="_elementName"
		_defaultPosition="_defaultPosition"
		_screenBoundsOffset="_screenBoundsOffset"
	)

	# Grip
	(block
		(style
			(hitTest = false)
			(height = "draggableSize")
			(width = "draggableSize")
			(alpha = "isMouseActive ? 1 : 0.3")
			(margin = 1px)
			(backgroundImage = 'url:../cursors/move_hand.dds')
		)
		(controller $Animation
			(bindcall play
				to	="{alpha: 0.3}"
				duration=0.15
				action="killAll"
				(bind enabled "!isMouseActive")
				(bind trigger "isMouseActive")
			)
			(bindcall play
				to	="{alpha: 1.0}"
				duration=0.15
				action="killAll"
				(bind enabled "isMouseActive")
				(bind trigger "isMouseActive")
			)
		)
	)
)

